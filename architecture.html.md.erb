---
title: Healthwatch Architecture
owner: Healthwatch
---

This topic describes the architecture of the Healthwatch&trade; for VMware Tanzu (Healthwatch), Healthwatch Exporter for VMware Tanzu Application Service&trade; (TAS for VMs),
and Healthwatch Exporter for VMware Tanzu Kubernetes Grid&trade; Integrated Edition (TKGI) tiles.
This topic also describes the possible configurations for monitoring metrics across multiple VMware Tanzu^&reg;^ Operations Manager&trade; (Ops Manager) foundations.

## <a id='architecture-overview'></a> Overview of Healthwatch Architecture

There are three tiles that form the Healthwatch architecture: Healthwatch, Healthwatch Exporter for TAS for VMs, and Healthwatch Exporter for TKGI.

A complete Healthwatch installation includes the Healthwatch tile, as well as at least one Healthwatch Exporter tile. However, you can deploy and use each
tile separately as part of an alternate monitoring configuration.

You must install a Healthwatch Exporter tile on each Ops Manager foundation you want to monitor. You can install the Healthwatch tile on the same Ops Manager
foundation or on a different Ops Manager foundation, depending on your desired monitoring configuration.

You can also configure the Healthwatch Exporter tiles to expose metrics to a service or database located outside your Ops Manager foundation, such as an
external time-series database (TSDB) or an installation of the Healthwatch tile on a separate Ops Manager foundation. This does not require you to install the
Healthwatch tile.

For a detailed explanation of the architecture for each tile, a list of open ports required for each component, and the possible configurations for monitoring
metrics across Ops Manager foundations, see the following sections:

* [Healthwatch Tile Architecture](#architecture-hw)

* [Healthwatch Exporter for TAS for VMs Architecture](#architecture-tas)

* [Healthwatch Exporter for TKGI Architecture](#architecture-tkgi)

* [Configuration Options](#configuration-options)


## <a id='architecture-hw'></a> Healthwatch Tile Architecture

When you install the Healthwatch tile, Healthwatch deploys instances of Prometheus, Grafana, and MySQL. Healthwatch also deploys an Nginx proxy in front of
the Prometheus instance for load-balancing.

The Prometheus instance scrapes and stores metrics from the Prometheus endpoints on the metric exporter VMs that the Healthwatch Exporter tiles deploy.
Prometheus also allows you to configure alerts with Alertmanager.

Healthwatch then exports these metrics to dashboards in the Grafana UI, where you can visualize the data in charts and graphs. You can also use Grafana to
create customized dashboards for long-term monitoring and troubleshooting.

<p class="note">
The MySQL instance that the Healthwatch tile deploys only stores your Grafana settings, and does not store any
time-series data.</p>

The diagram below illustrates how metrics travel from the Healthwatch Exporter tiles through Prometheus and to Grafana. It also shows how metrics travel
through Prometheus to Alertmanager.

![A Healthwatch Exporter tile, Healthwatch tile and an alert. An arrow points from the Healthwatch Exporter into the Healthwatch tile. Inside the Healthwatch tile are Prometheus, Grafana, Alertmanager and MySQL instances. An arrow points from Prometheus to Grafana and from Prometheus through Alertmanager to alerts. MySQL is next to Grafana.](images/healthwatch-tile-architecture.png)

<br>
### <a id='ha-mode'></a> High Availability

You can deploy the Healthwatch tile in high availability (HA) mode with three MySQL nodes and two MySQL Proxy nodes, or in non-HA mode with one MySQL node and
one MySQL Proxy node.

<br>
### <a id='scaling'></a> Component Scaling

Healthwatch deploys two Prometheus VMs by default to create an HA Prometheus instance. If you do not need Prometheus to be HA, you can scale the Prometheus
instance vertically to one Prometheus VM. To further scale the Prometheus instance, you can scale it horizontally by increasing the disk size of each VM in
the Prometheus instance.

Healthwatch deploys a single Grafana VM by default. If you want to make the Grafana instance HA, you can scale the Grafana instance horizontally.

If you do not want to use any Grafana instances in your Healthwatch deployment, you can set the number of Grafana, MySQL, and MySQL Proxy instances for your
Healthwatch deployment to `0` in the **Resource Config** pane of the Healthwatch tile.

For more information about scaling Healthwatch resources, see [Healthwatch Components and Resource Requirements](resources.html).

<br>
### <a id='network-rules-hw'></a> Networking Rules for the Healthwatch Tile

The table below describes the ports you must open for each Healthwatch component:

<table>
  <tr>
    <th style="width: 22%">This component ...</th>
    <th style="width: 25%">Must communicate with ...</th>
    <th style="width: 20%">Default TCP Port</th>
    <th style="width: 37%">Notes</th>
  </tr>
  <tr>
    <td><code>grafana</code></td>
    <td>
      <ul>
        <li><code>tsdb</code></li>
        <li><code>pxc-proxy</code></li>
        <li>External alerting URLs</li>
        <li>External data sources</li>
        <li>External authentication</li>
        <li>External SMTP server</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>4449</code></li>
        <li><code>3306</code></li>
      </ul>
    </td>
    <td>Additional networking rules may be required for any external connections listed. For example, <code>443</code> for UAA.</td>
  </tr>
  <tr>
    <td><code>blackbox-exporter</code></td>
    <td>External canary target URLs</td>
    <td>N/A</td>
    <td>Additional networking rules may be required, depending on your external canary target URL configuration.</td>
  </tr>
  <tr>
    <td><code>tsdb</code></td>
    <td>
      <ul>
        <li><code>blackbox-exporter</code></li>
        <li>All VMs deployed by Healthwatch Exporter tiles</li>
      </ul>
    </td>
    <td><code>9090</code></td>
    <td></td>
  </tr>
  <tr>
    <td><code>tsdb</code> (for TKGI cluster discovery)</td>
    <td>For each cluster:
      <ul>
        <li>Kube API Server</li>
        <li>Kube Controller Manager</li>
        <li>Kube Scheduler</li>
        <li>etcd (Telegraf output plugin)</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>8443</code></li>
        <li><code>10252</code></li>
        <li><code>10251</code></li>
        <li><code>10200</code></li>
      </ul>
    </td>
    <td>You only need to open these ports if you configure TKGI cluster discovery.</td>
  </tr>
</table>


## <a id='architecture-tas'></a> Healthwatch Exporter for TAS for VMs Architecture

The **Healthwatch Exporter for TAS for VMs** tile deploys metric exporter VMs to generate each type of metric related to the health of your TAS for VMs
deployment.

Healthwatch Exporter for TAS for VMs sends metrics through the Loggregator Firehose to a Prometheus exposition endpoint on the associated metric exporter VMs.
The Prometheus instance that exists within your metrics monitoring system then scrapes the exposition endpoints on the metric exporter VMs and imports those
metrics into your monitoring system.

You can scale the VMs that Healthwatch Exporter for TAS for VMs deploys vertically, but should not scale them horizontally.

<br>
### <a id='network-rules-tas'></a> Networking Rules for Healthwatch Exporter for TAS for VMs

The table below describes the ports you must open for each Healthwatch Exporter for TAS for VMs component:

<table>
  <tr>
    <th style="width: 22%">This component ...</th>
    <th style="width: 25%">Must communicate with ...</th>
    <th style="width: 20%">Default TCP Port</th>
  </tr>
  <tr>
    <td><code>bosh-deployments-exporter</code></td>
    <td>
      <ul>
        <li>BOSH Director UAA</li>
        <li>BOSH Director</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>8443</code></li>
        <li><code>25555</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td><code>bosh-health-exporter</code></td>
    <td>
      <ul>
        <li>BOSH Director UAA</li>
        <li>BOSH Director</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>8443</code></li>
        <li><code>25555</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td><code>cert-expiration-exporter</code></td>
    <td>Ops Manager</td>
    <td><code>443</code></td>
  </tr>
  <tr>
    <td><code>pas-exporter-counter</code></td>
    <td>Reverse Log Proxy (RLP) nozzle</td>
    <td><code>8082</code></td>
  </tr>
  <tr>
    <td><code>pas-exporter-gauge</code></td>
    <td>RLP nozzle</td>
    <td><code>8082</code></td>
  </tr>
  <tr>
    <td><code>pas-sli-exporter</code></td>
    <td>
      <ul>
        <li>CAPI</li>
        <li>UAA</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>443</code></li>
        <li><code>443</code></li>
      </ul>
    </td>
  </tr>
</table>


## <a id='architecture-tkgi'></a> Healthwatch Exporter for TKGI Architecture

The **Healthwatch Exporter for TKGI** tile deploys metric exporter VMs to generate SLIs related to the health of your TKGI deployment.

The Prometheus instance that exists within your metrics monitoring system then scrapes the Prometheus exposition endpoints on the metric exporter VMs and
imports those metrics into your monitoring system.

You can scale the VMs that Healthwatch Exporter for TKGI deploys vertically, but should not scale them horizontally.

<br>
### <a id='network-rules-tkgi'></a> Networking Rules for Healthwatch Exporter for TKGI

The table below describes the ports you must open for each Healthwatch Exporter for TKGI component:

<table>
  <tr>
    <th style="width: 22%">This component ...</th>
    <th style="width: 25%">Must communicate with ...</th>
    <th style="width: 20%">Default TCP Port</th>
  </tr>
  <tr>
    <td><code>bosh-deployments-exporter</code></td>
    <td>
      <ul>
        <li>BOSH Director UAA</li>
        <li>BOSH Director</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>8443</code></li>
        <li><code>25555</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td><code>bosh-health-exporter</code></td>
    <td>
      <ul>
        <li>BOSH Director UAA</li>
        <li>BOSH Director</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>8443</code></li>
        <li><code>25555</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td><code>cert-expiration-exporter</code></td>
    <td>Ops Manager</td>
    <td><code>443</code></td>
  </tr>
  <tr>
    <td><code>pks-exporter</code></td>
    <td>
      <ul>
        <li>BOSH Director UAA</li>
        <li>BOSH Director metrics agent</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>8443</code></li>
        <li><code>25595</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td><code>pks-sli-exporter</code></td>
    <td>
      <ul>
        <li>TKGI API UAA</li>
        <li>TKGI API</li>
      </ul>
    </td>
    <td>
      <ul>
        <li><code>8443</code></li>
        <li><code>9021</code></li>
      </ul>
    </td>
  </tr>
</table>


## <a id='configuration-options'></a> Configuration Options

Healthwatch can be configured in multiple ways, allowing you to monitor metrics across a variety of platform and foundation configurations. The sections below
describe the most common configuration scenarios:

* [Monitoring TAS for VMs on a Single Ops Manager Foundation](#tas-single-foundation)

* [Monitoring TKGI on a Single Ops Manager Foundation](#tkgi-single-foundation)

* [Monitoring TAS for VMs and TKGI on a Single Ops Manager Foundation](#tas-tkgi-single-foundation)

* [Configure Multi-Foundation Monitoring Using Direct Scraping](#multiple-foundations-direct-scrape)

* [Configure Multi-Foundation Monitoring Using Federation](#multiple-foundations-federation)

<br>
### <a id='tas-single-foundation'></a> Monitoring TAS for VMs on a Single Ops Manager Foundation

If you only want to monitor a single Ops Manager foundation that has TAS for VMs installed, install the Healthwatch tile and Healthwatch Exporter for TAS for
VMs on the same foundation. The Healthwatch tile automatically detects Healthwatch Exporter for TAS for VMs on the same Ops Manager foundation and adds a
scrape job for Healthwatch Exporter for TAS for VMs to the Prometheus instance.

For more information about installing and configuring the Healthwatch tile and Healthwatch Exporter for TAS for VMs, see the following topics:

* [Installing a Tile Manually](installing/installing-manually.html) or [Installing, Configuring, and Deploying a Tile Through an Automated
Pipeline](installing/automated-pipeline.html)

* [Configuring Healthwatch](configuring/configuring-healthwatch.html)

* [Configuring Healthwatch Exporter for TAS for VMs](configuring/configuring-exporter-tas.html)

<br>
### <a id='tkgi-single-foundation'></a> Monitoring TKGI on a Single Ops Manager Foundation

If you only want to monitor a single Ops Manager foundation that has TKGI installed, install the Healthwatch tile and Healthwatch Exporter for TKGI on the
same foundation. The Healthwatch tile automatically detects Healthwatch Exporter for TKGI on the same Ops Manager foundation and adds a scrape job for
Healthwatch Exporter for TKGI to the Prometheus instance.

For more information about installing and configuring the Healthwatch tile and Healthwatch Exporter for TKGI, see the following topics:

* [Installing a Tile Manually](installing/installing-manually.html) or [Installing, Configuring, and Deploying a Tile Through an Automated
Pipeline](installing/automated-pipeline.html)

* [Configuring Healthwatch](configuring/configuring-healthwatch.html)

* [Configuring Healthwatch Exporter for TKGI](configuring/configuring-exporter-tkgi.html)

<br>
### <a id='tas-tkgi-single-foundation'></a> Monitoring TAS for VMs and TKGI on a Single Ops Manager Foundation

If you only want to monitor a single Ops Manager foundation that has both TAS for VMs and TKGI installed, install the Healthwatch tile, Healthwatch Exporter
for TAS for VMs, and Healthwatch Exporter for TKGI on the same foundation. The Healthwatch tile automatically detects Healthwatch Exporter for TAS for VMs and
Healthwatch Exporter for TKGI on the same Ops Manager foundation and adds scrape jobs for both Healthwatch Exporter tiles to the Prometheus instance.

For more information about installing and configuring the Healthwatch tile, Healthwatch Exporter for TAS for VMs, and Healthwatch Exporter for TKGI, see the
following topics:

* [Installing a Tile Manually](installing/installing-manually.html) or [Installing, Configuring, and Deploying a Tile Through an Automated
Pipeline](installing/automated-pipeline.html)

* [Configuring Healthwatch](configuring/configuring-healthwatch.html)

* [Configuring Healthwatch Exporter for TAS for VMs](configuring/configuring-exporter-tas.html)

* [Configuring Healthwatch Exporter for TKGI](configuring/configuring-exporter-tkgi.html)

<br>
### <a id='multiple-foundations-direct-scrape'></a> Configure Multi-Foundation Monitoring Using Direct Scraping

You can monitor several Ops Manager foundations from a single monitoring Ops Manager foundation using direct scraping.

When you configure direct scraping for your multi-foundation Healthwatch deployment, the Prometheus instance in the Healthwatch tile on a monitoring Ops
Manager foundation scrapes metrics directly from the metric exporter VMs deployed by the Healthwatch Exporter tiles installed on the Ops Manager foundation
you monitor.

To configure your Healthwatch deployment to monitor several Ops Manager foundations from a single monitoring Ops Manager foundation using direct scraping, see
[Configure Multi-Foundation Monitoring Using Direct
Scraping](configuring/multi-foundation-monitoring/multi-foundation-monitoring.html#multiple-foundations-direct-scrape) in _Configuring Multi-Foundation
Monitoring_.

<br>
### <a id='multiple-foundations-federation'></a> Configure Multi-Foundation Monitoring Using Federation

You can monitor several Ops Manager foundations from a single monitoring Ops Manager foundation using federation.

When you configure federation for your multi-foundation Healthwatch deployment, the Prometheus instance in the Healthwatch tile on a monitoring Ops Manager
foundation scrapes a subset of metrics from the Prometheus instances in the Healthwatch tiles installed on the Ops Manager foundations you monitor.

To configure your Healthwatch deployment to monitor several Ops Manager foundations from a single monitoring Ops Manager foundation using federation, see
[Configure Multi-Foundation Monitoring Using
Federation](configuring/multi-foundation-monitoring/multi-foundation-monitoring.html#multiple-foundations-federation) in _Configuring Multi-Foundation
Monitoring_.
